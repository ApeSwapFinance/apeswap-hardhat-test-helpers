{
  "contractName": "ApeRouter",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETHSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/ApeRouter.sol\":\"ApeRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x0920a26df9837a073c6b24c4e2542d9409c173748e0c6728a1ae39ce5c368899\",\"urls\":[\"bzz-raw://46c191c0fc6452e0c1c75725b4f577309cc20f081f85a1d10f706d0d9127297e\",\"dweb:/ipfs/QmVuExKwURcyQVax2YDKZqYZELwjNQ4KRyLnKwvHD8rz44\"]},\"project:/contracts/ApeRouter.sol\":{\"keccak256\":\"0x60fdcb9f0bf1fda7f5524f8b681519962bf7d90583c7630ab6f4cd9016a0bd6c\",\"urls\":[\"bzz-raw://3df2d5c34047e677bae5c42ed4356ea1cfb249cc350b7f52bf48f974067d4c9f\",\"dweb:/ipfs/QmYz3nJaWGTdQftChmm9zV9gXk48mQQ6KVRFxYHtcw2At4\"]},\"project:/contracts/interfaces/IApeFactory.sol\":{\"keccak256\":\"0x9d37a2739742125e6471ed7579dc0352022252685d4047c27ebfc62d28b7aea6\",\"urls\":[\"bzz-raw://4842b7146706bbd38c6e6b58090588a39be36680bd5c935935e1327f33ea011d\",\"dweb:/ipfs/QmSMNkskVxvSa6dHH6t6gx3ps81T37dP4YeHBPsibRTmJ8\"]},\"project:/contracts/interfaces/IApePair.sol\":{\"keccak256\":\"0xf14024513aca76c2f6aa69aed4187ee8ca05a39a0beddc46d3723d66c386c434\",\"urls\":[\"bzz-raw://a031933d69638902634f09c9a4ea1afd915bec6859bfe94aec5e2473632fb79e\",\"dweb:/ipfs/QmTrUKQ4bovkzjwHjV5wfCfao96K46E9e1KY4hyrTzpnni\"]},\"project:/contracts/interfaces/IApeRouter01.sol\":{\"keccak256\":\"0xad1c658327282f1f6af49b2574b2129115ada2b39b11668bfb23e0101e9ddab3\",\"urls\":[\"bzz-raw://81433167d19af0609ceac57c014f0335b109a389cdf81b86f9928de2c69cc527\",\"dweb:/ipfs/QmTbWDtCBumK26cwN17amnTRLVA4bftqLbpkBCx9EjEdbE\"]},\"project:/contracts/interfaces/IApeRouter02.sol\":{\"keccak256\":\"0x7ddd238790bfcb7411a66327801568da451239142391806bfdf6d0f663b80cbc\",\"urls\":[\"bzz-raw://3d42eb4f533a3e0b37157958d1d6b0d344d61ce752d3b6cae0658b5ab5cdab34\",\"dweb:/ipfs/QmZtVrfcQSui3agBkjrEbEySGVZG83nSzEhvuuyRpPSH3p\"]},\"project:/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x61db17aebc5d812c7002d15c1da954065e56abe49d64b14c034abe5604d70eb3\",\"urls\":[\"bzz-raw://b006685e753f9120469f10b09c159f222d4cb8b507a6c1f0c14ed50c883ebe66\",\"dweb:/ipfs/QmSyY7iTugbczPwfGK67etiyPULenYGzzRYbt8aabwwkUb\"]},\"project:/contracts/interfaces/IWETH.sol\":{\"keccak256\":\"0xfc10758fd8dba790c39468dccd358cb7cef06ae7c4781832cc7aa76f91f167e6\",\"urls\":[\"bzz-raw://dc22493dea6c60d47835eeba53726f8a6f76f4fcd798d40e54608a1380515d49\",\"dweb:/ipfs/QmS1QVcBRH4TELYNE7XCfjSVQEWFupyaNLKmMkKH7iPjrm\"]},\"project:/contracts/libraries/ApeLibrary.sol\":{\"keccak256\":\"0x2588ca0042e2b65fe920abe875cf08003111fb5406821651f400f97203608452\",\"urls\":[\"bzz-raw://9127e7af9f6dafa3f0cc3600cb2ef5ee2953de3f3f2cf09c65fc2cfb62712323\",\"dweb:/ipfs/QmcAmZwcFb4S2sbqbyf8m3cZaMZwv5Y4Q4VFDNYt17V7w6\"]},\"project:/contracts/libraries/SafeMath.sol\":{\"keccak256\":\"0x27f0ea82f879b3b01387b583e6d9d0ec858dca3b22b0aad173f8fbda06e761e1\",\"urls\":[\"bzz-raw://0db9cf37793eb7035f0bfced36323d240f0212150009c39a3a108701d9b50b6c\",\"dweb:/ipfs/QmUAdiG9XNcieXkKfiMB49zQqD34FbXFE15csV2KQzwEqg\"]}},\"version\":1}",
  "bytecode": "",
  "immutableReferences": {
    "2333": [
      {
        "length": 32,
        "start": 4295
      },
      {
        "length": 32,
        "start": 4549
      },
      {
        "length": 32,
        "start": 4971
      },
      {
        "length": 32,
        "start": 5028
      },
      {
        "length": 32,
        "start": 5455
      },
      {
        "length": 32,
        "start": 6116
      },
      {
        "length": 32,
        "start": 6324
      },
      {
        "length": 32,
        "start": 6817
      },
      {
        "length": 32,
        "start": 8799
      },
      {
        "length": 32,
        "start": 9216
      },
      {
        "length": 32,
        "start": 9641
      },
      {
        "length": 32,
        "start": 10908
      },
      {
        "length": 32,
        "start": 11743
      },
      {
        "length": 32,
        "start": 12286
      },
      {
        "length": 32,
        "start": 12327
      },
      {
        "length": 32,
        "start": 12375
      },
      {
        "length": 32,
        "start": 12852
      },
      {
        "length": 32,
        "start": 13283
      },
      {
        "length": 32,
        "start": 14266
      },
      {
        "length": 32,
        "start": 14680
      },
      {
        "length": 32,
        "start": 17367
      },
      {
        "length": 32,
        "start": 17434
      },
      {
        "length": 32,
        "start": 18298
      },
      {
        "length": 32,
        "start": 18779
      },
      {
        "length": 32,
        "start": 20226
      },
      {
        "length": 32,
        "start": 20451
      },
      {
        "length": 32,
        "start": 20579
      }
    ],
    "2336": [
      {
        "length": 32,
        "start": 428
      },
      {
        "length": 32,
        "start": 3677
      },
      {
        "length": 32,
        "start": 3736
      },
      {
        "length": 32,
        "start": 4053
      },
      {
        "length": 32,
        "start": 4760
      },
      {
        "length": 32,
        "start": 5874
      },
      {
        "length": 32,
        "start": 6358
      },
      {
        "length": 32,
        "start": 7710
      },
      {
        "length": 32,
        "start": 8098
      },
      {
        "length": 32,
        "start": 8306
      },
      {
        "length": 32,
        "start": 8569
      },
      {
        "length": 32,
        "start": 9004
      },
      {
        "length": 32,
        "start": 9153
      },
      {
        "length": 32,
        "start": 9843
      },
      {
        "length": 32,
        "start": 10010
      },
      {
        "length": 32,
        "start": 10223
      },
      {
        "length": 32,
        "start": 10484
      },
      {
        "length": 32,
        "start": 10716
      },
      {
        "length": 32,
        "start": 10845
      },
      {
        "length": 32,
        "start": 12409
      },
      {
        "length": 32,
        "start": 13231
      },
      {
        "length": 32,
        "start": 13317
      },
      {
        "length": 32,
        "start": 13369
      },
      {
        "length": 32,
        "start": 13498
      },
      {
        "length": 32,
        "start": 14036
      },
      {
        "length": 32,
        "start": 14468
      },
      {
        "length": 32,
        "start": 14617
      }
    ]
  },
  "sourceMap": "623:17697:15:-:0;;;909:109;5:9:-1;2:2;;;27:1;24;17:12;2:2;909:109:15;;;;;;;;;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;909:109:15;;;;;;;-1:-1:-1;;;;;;971:18:15;;;;;;;;999:12;;;;;623:17697;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "623:17697:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1068:10;:18;1082:4;1068:18;;1061:26;;;;623:17697;;12:1:-1;9;2:12;5035:653:15;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5035:653:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;5035:653:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;17327:248;;5:9:-1;2:2;;;27:1;24;17:12;2:2;17327:248:15;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;17327:248:15;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;11896:810;;5:9:-1;2:2;;;27:1;24;17:12;2:2;11896:810:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;11896:810:15;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;11896:810:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;11896:810:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;11896:810:15;;-1:-1:-1;11896:810:15;-1:-1:-1;11896:810:15;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11896:810:15;;;;;;;;;;;;;;;;;18079:239;;5:9:-1;2:2;;;27:1;24;17:12;2:2;18079:239:15;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;18079:239:15;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;18079:239:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;18079:239:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;18079:239:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;18079:239:15;;-1:-1:-1;18079:239:15;;-1:-1:-1;;;;;18079:239:15:i;5693:651::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5693:651:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;5693:651:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;9257:597::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;9257:597:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;9257:597:15;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;9257:597:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;9257:597:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;9257:597:15;;-1:-1:-1;9257:597:15;-1:-1:-1;9257:597:15;;;;;;;;;:::i;11103:788::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;11103:788:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;11103:788:15;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;11103:788:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;11103:788:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;11103:788:15;;-1:-1:-1;11103:788:15;-1:-1:-1;11103:788:15;;;;;;;;;:::i;7754:691::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7754:691:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;7754:691:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;14790:686::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;14790:686:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;14790:686:15;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;14790:686:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;14790:686:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;14790:686:15;;-1:-1:-1;14790:686:15;-1:-1:-1;14790:686:15;;;;;;;;;:::i;16296:804::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;16296:804:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;16296:804:15;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;16296:804:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;16296:804:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;16296:804:15;;-1:-1:-1;16296:804:15;-1:-1:-1;16296:804:15;;;;;;;;;:::i;10439:659::-;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;10439:659:15;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;10439:659:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;10439:659:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10439:659:15;;-1:-1:-1;10439:659:15;-1:-1:-1;10439:659:15;;;;;;;;;:::i;17581:247::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;17581:247:15;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;17581:247:15;;;;;;;;;;;;:::i;9859:575::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;9859:575:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;9859:575:15;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;9859:575:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;9859:575:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;9859:575:15;;-1:-1:-1;9859:575:15;-1:-1:-1;9859:575:15;;;;;;;;;:::i;741:38::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;741:38:15;;;:::i;:::-;;;;;;;;;;;;;;;;;;;17141:180;;5:9:-1;2:2;;;27:1;24;17:12;2:2;17141:180:15;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;17141:180:15;;;;;;;;;;;;:::i;7069:680::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7069:680:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;7069:680:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;15481:810::-;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;15481:810:15;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;15481:810:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;15481:810:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;15481:810:15;;-1:-1:-1;15481:810:15;-1:-1:-1;15481:810:15;;;;;;;;;:::i;4207:823::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4207:823:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;4207:823:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;694:41::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;694:41:15;;;:::i;17834:239::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;17834:239:15;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;17834:239:15;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;17834:239:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;17834:239:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;17834:239:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;17834:239:15;;-1:-1:-1;17834:239:15;;-1:-1:-1;;;;;17834:239:15:i;6349:644::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6349:644:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;6349:644:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2512:711::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2512:711:15;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;2512:711:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;3228:939;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;3228:939:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;12711:770::-;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;12711:770:15;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;12711:770:15;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;12711:770:15;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;12711:770:15;;-1:-1:-1;12711:770:15;-1:-1:-1;12711:770:15;;;;;;;;;:::i;5035:653::-;5265:16;5283:14;5246:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5336:188:::1;5365:5;5384:4;5402:9;5425:14;5453:12;5487:4;5506:8;5336:15;:188::i;:::-;5309:215:::0;;-1:-1:-1;5309:215:15;-1:-1:-1;5534:51:15::1;5562:5:::0;5569:2;5309:215;5534:27:::1;:51::i;:::-;5601:4;5595:20;;;5616:9;5595:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;5595:31:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;5595:31:15;;;;5636:45;5667:2;5671:9;5636:30;:45::i;:::-;5035:653:::0;;;;;;;;;;:::o;17327:248::-;17475:14;17512:56;17536:8;17546:9;17557:10;17512:23;:56::i;:::-;17505:63;17327:248;-1:-1:-1;;;;17327:248:15:o;11896:810::-;12105:21;12078:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12150:29:::1;12175:4;12150:29;:4:::0;;12155:15;;;12150:21;;::::1;;;;;;;;;;;;;:29;;;12142:65;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;12227:49;12252:7;12261:8;12271:4;;12227:49;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;12227:24:15::1;::::0;-1:-1:-1;;;12227:49:15:i:1;:::-;12217:59;;12325:12;12294:7;12319:1;12302:7;:14;:18;12294:27;;;;;;;;;;;;;;:43;;12286:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12389:133;12434:4;;12439:1;12434:7;;;;;;;;;;;;;;;12443:10;12455:45;12474:7;12483:4;;12488:1;12483:7;;;;;;;;;;;;;;;12492:4;;12497:1;12492:7;;;;;;;;;;;;;;;12455:18;:45::i;:::-;12502:7;12510:1;12502:10;;;;;;;;;;;;;;12389:31;:133::i;:::-;12532:35;12538:7;12547:4;;12532:35;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;12561:4:15::1;::::0;-1:-1:-1;12532:5:15::1;::::0;-1:-1:-1;;12532:35:15:i:1;:::-;12583:4;12577:20;;;12598:7;12623:1;12606:7;:14;:18;12598:27;;;;;;;;;;;;;;12577:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;12577:49:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;12577:49:15;;;;12636:63;12667:2;12671:7;12696:1;12679:7;:14;:18;12671:27;;;;;;;;;;;;;;12636:30;:63::i;:::-;11896:810:::0;;;;;;;;;:::o;18079:239::-;18218:21;18262:49;18286:7;18295:9;18306:4;18262:23;:49::i;:::-;18255:56;;18079:239;;;;;:::o;5693:651::-;5990:12;6004;6028;6043:43;6062:7;6071:6;6079;6043:18;:43::i;:::-;6028:58;;6096:10;6109;:33;;6133:9;6109:33;;;6127:2;6109:33;6152:74;;;;;;6174:10;6152:74;;;;6194:4;6152:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6096:46;;-1:-1:-1;6152:21:15;;;;;;:74;;;;;-1:-1:-1;;6152:74:15;;;;;;;;-1:-1:-1;6152:21:15;:74;;;2:2:-1;;;;27:1;24;17:12;2:2;6152:74:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6152:74:15;;;;6257:80;6273:6;6281;6289:9;6300:10;6312;6324:2;6328:8;6257:15;:80::i;:::-;6236:101;;;;;;;;5693:651;;;;;;;;;;;;;;;;:::o;9257:597::-;9475:21;9456:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9518:49:::1;9543:7;9552:8;9562:4;;9518:49;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;9518:24:15::1;::::0;-1:-1:-1;;;9518:49:15:i:1;:::-;9508:59;;9616:12;9585:7;9610:1;9593:7;:14;:18;9585:27;;;;;;;;;;;;;;:43;;9577:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9680:133;9725:4;;9730:1;9725:7;;;;;;9680:133;9823:24;9829:7;9838:4;;9823:24;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;9844:2:15;;-1:-1:-1;9823:5:15::1;::::0;-1:-1:-1;;9823:24:15:i:1;11103:788::-:0;11312:21;11285:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11357:29:::1;11382:4;11357:29;:4:::0;;11362:15;;;11357:21;;::::1;;;;;;;;;;;;;:29;;;11349:65;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;11434:49;11458:7;11467:9;11478:4;;11434:49;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;11434:23:15::1;::::0;-1:-1:-1;;;11434:49:15:i:1;:::-;11424:59;;11515:11;11501:7;11509:1;11501:10;;;;;;;;;;;;;;:25;;11493:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7754:691:::0;8064:14;8090:12;8105:40;8124:7;8133:5;8140:4;8105:18;:40::i;:::-;8090:55;;8155:10;8168;:33;;8192:9;8168:33;;;8186:2;8168:33;8211:74;;;;;;8233:10;8211:74;;;;8253:4;8211:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8155:46;;-1:-1:-1;8211:21:15;;;;;;:74;;;;;-1:-1:-1;;8211:74:15;;;;;;;;-1:-1:-1;8211:21:15;:74;;;2:2:-1;;;;27:1;24;17:12;2:2;8211:74:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8211:74:15;;;;8307:131;8368:5;8375:9;8386:14;8402:12;8416:2;8420:8;8307:47;:131::i;:::-;8295:143;7754:691;-1:-1:-1;;;;;;;;;;;;;7754:691:15:o;14790:686::-;15018:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15038:131:::1;15083:4;;15088:1;15083:7;;;;;;;;;;;;;;;15092:10;15104:45;15123:7;15132:4;;15137:1;15132:7;;;;;;;;;;;;;;;15141:4;;15146:1;15141:7;;;;;;15104:45;15151:8;15038:31;:131::i;:::-;15179:18;15207:4:::0;;15212:15;;;15207:21;;::::1;;;;;;;;;;;;;15200:39;;;15240:2;15200:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;15200:43:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;15200:43:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;15200:43:15;15253:44:::1;::::0;;15200:43:::1;15253:44:::0;;::::1;::::0;;;;;;;;;;;15200:43;;-1:-1:-1;15253:44:15::1;::::0;;;15288:4;;;;;;15253:44;::::1;::::0;15288:4;;15253:44;15288:4;15253:44;1:33:-1::1;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;15294:2:15;;-1:-1:-1;15253:34:15::1;::::0;-1:-1:-1;;15253:44:15:i:1;:::-;15394:12:::0;15328:62:::1;15376:13:::0;15335:4;;15340:15;;;15335:21;;::::1;;;;;;;;;;;;;15328:39;;;15368:2;15328:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;15328:43:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;15328:43:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;15328:43:15;;:62:::1;:47;:62;:::i;:::-;:78;;15307:162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;895:1;14790:686:::0;;;;;;;:::o;16296:804::-;16553:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16585:29:::1;16610:4;16585:29;:4:::0;;16590:15;;;16585:21;;::::1;;;;;;;;;;;;;:29;;;16577:65;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;16652:131;16697:4;;16702:1;16697:7;;;;;;16652:131;16793:55;16828:4;;16793:55;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;16842:4:15::1;::::0;-1:-1:-1;16793:34:15::1;::::0;-1:-1:-1;;16793:55:15:i:1;:::-;16875:37;::::0;;;;;16906:4:::1;16875:37;::::0;::::1;::::0;;;16858:14:::1;::::0;16875:22:::1;16882:4;16875:22;::::0;::::1;::::0;:37;;;;;::::1;::::0;;;;;;;;;:22;:37;::::1;;2:2:-1::0;::::1;;;27:1;24::::0;17:12:::1;2:2;16875:37:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;16875:37:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;16875:37:15;;-1:-1:-1;16930:25:15;;::::1;;16922:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17013:4;17007:20;;;17028:9;17007:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;17007:31:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;17007:31:15;;;;17048:45;17079:2;17083:9;17048:30;:45::i;10439:659::-:0;10649:21;10622:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10705:4:::1;10694:15;;:4;;10699:1;10694:7;;;;;;;;;;;;;;;:15;;;10686:51;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;10757:50;10782:7;10791:9;10802:4;;10757:50;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;10757:24:15::1;::::0;-1:-1:-1;;;10757:50:15:i:1;:::-;10747:60;;10856:12;10825:7;10850:1;10833:7;:14;:18;10825:27;;;;;;;;;;;;;;:43;;10817:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10926:4;10920:19;;;10947:7;10955:1;10947:10;;;;;;;;;;;;;;10920:40;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;10920:40:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;10920:40:15;;;;;10983:4;10977:20;;;10998:45;11017:7;11026:4;;11031:1;11026:7;;;;;;10998:45;11045:7;11053:1;11045:10;;;;;;;;;;;;;;10977:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;10977:79:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;10977:79:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;10977:79:15;10970:87:::1;;;;11067:24;11073:7;11082:4;;11067:24;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;11088:2:15;;-1:-1:-1;11067:5:15::1;::::0;-1:-1:-1;;11067:24:15:i:1;:::-;10439:659:::0;;;;;;;;:::o;17581:247::-;17729:13;17765:56;17788:9;17799;17810:10;17765:22;:56::i;9859:575::-;10077:21;10058:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10120:49:::1;10144:7;10153:9;10164:4;;10120:49;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;10120:23:15::1;::::0;-1:-1:-1;;;10120:49:15:i:1;:::-;10110:59;;10201:11;10187:7;10195:1;10187:10;;;;;;;;;;;;;;:25;;10179:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;741:38:::0;;;:::o;17141:180::-;17238:12;17269:45;17286:7;17295:8;17305;17269:16;:45::i;7069:680::-;7328:14;7309:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7370:188:::1;7399:5;7418:4;7436:9;7459:14;7487:12;7521:4;7540:8;7370:15;:188::i;:::-;7607:38;::::0;;;;;7639:4:::1;7607:38;::::0;::::1;::::0;;;7354:204;;-1:-1:-1;7568:78:15::1;::::0;-1:-1:-1;7596:5:15;;7603:2;;7607:23:::1;::::0;::::1;::::0;::::1;::::0;:38;;;;;::::1;::::0;;;;;;;;;:23;:38;::::1;;2:2:-1::0;::::1;;;27:1;24::::0;17:12:::1;2:2;7607:38:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;7607:38:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;7607:38:15;7568:27:::1;:78::i;:::-;7662:4;7656:20;;;7677:9;7656:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;7656:31:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;7656:31:15;;;;7697:45;7728:2;7732:9;7697:30;:45::i;15481:810::-:0;15731:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15774:4:::1;15763:15;;:4;;15768:1;15763:7;;;;;;;;;;;;;;;:15;;;15755:51;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;15816:13;15832:9;15816:25;;15857:4;15851:19;;;15878:8;15851:38;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;15851:38:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;15851:38:15;;;;;15912:4;15906:20;;;15927:45;15946:7;15955:4;;15960:1;15955:7;;;;;;15927:45;15974:8;15906:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;15906:77:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;15906:77:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;15906:77:15;15899:85:::1;;;;15994:18;16022:4:::0;;16027:15;;;16022:21;;::::1;;;;;;;;;;;;;16015:39;;;16055:2;16015:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;16015:43:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;16015:43:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;16015:43:15;16068:44:::1;::::0;;16015:43:::1;16068:44:::0;;::::1;::::0;;;;;;;;;;;16015:43;;-1:-1:-1;16068:44:15::1;::::0;;;16103:4;;;;;;16068:44;::::1;::::0;16103:4;;16068:44;16103:4;16068:44;1:33:-1::1;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;16109:2:15;;-1:-1:-1;16068:34:15::1;::::0;-1:-1:-1;;16068:44:15:i:1;:::-;16209:12:::0;16143:62:::1;16191:13:::0;16150:4;;16155:15;;;16150:21;;::::1;;;;;;;;;;;;;16143:39;;;16183:2;16143:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;4207:823:15::0;4453:12;4467;4434:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4491:12:::1;4506:43;4525:7;4534:6;4542;4506:18;:43::i;:::-;4491:58;;4559:66;4591:4;4597:10;4609:4;4615:9;4559:31;:66::i;:::-;4692:23;::::0;;;;;:19:::1;:23:::0;;::::1;;::::0;::::1;::::0;;;4662:12:::1;::::0;;;4692:19;;::::1;::::0;::::1;::::0;:23;;;;;;;;;;;4662:12;4692:19;:23;::::1;;2:2:-1::0;::::1;;;27:1;24::::0;17:12:::1;2:2;4692:23:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;4692:23:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;4692:23:15;;::::1;::::0;;::::1;::::0;;;-1:-1:-1;4692:23:15;-1:-1:-1;4726:14:15::1;4745:37;4767:6:::0;4775;4745:21:::1;:37::i;:::-;4725:57;;;4823:6;4813:16;;:6;:16;;;:58;;4854:7;4863;4813:58;;;4833:7;4842;4813:58;4792:79:::0;;-1:-1:-1;4792:79:15;-1:-1:-1;4889:21:15;;::::1;;4881:66;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;;;;;;;::::1;::::0;;;;;;;;;;;;;::::1;;4976:10;4965:7;:21;;4957:66;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;;;;;;;::::1;::::0;;;;;;;;;;;;;::::1;;895:1;;;;4207:823:::0;;;;;;;;;;;:::o;694:41::-;;;:::o;17834:239::-;17973:21;18017:49;18042:7;18051:8;18061:4;18017:24;:49::i;6349:644::-;6630:16;6648:14;6674:12;6689:40;6708:7;6717:5;6724:4;6689:18;:40::i;:::-;6674:55;;6739:10;6752;:33;;6776:9;6752:33;;;6770:2;6752:33;6795:74;;;;;;6817:10;6795:74;;;;6837:4;6795:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6739:46;;-1:-1:-1;6795:21:15;;;;;;:74;;;;;-1:-1:-1;;6795:74:15;;;;;;;;-1:-1:-1;6795:21:15;:74;;;2:2:-1;;;;27:1;24;17:12;2:2;6795:74:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6795:74:15;;;;6906:80;6925:5;6932:9;6943:14;6959:12;6973:2;6977:8;6906:18;:80::i;:::-;6879:107;;;;-1:-1:-1;6349:644:15;-1:-1:-1;;;;;;;;;;;;;6349:644:15:o;2512:711::-;2791:12;2805;2819:14;2772:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2866:85:::1;2880:6;2888;2896:14;2912;2928:10;2940;2866:13;:85::i;:::-;2845:106:::0;;-1:-1:-1;2845:106:15;-1:-1:-1;2961:12:15::1;2976:43;2995:7;3004:6:::0;3012;2976:18:::1;:43::i;:::-;2961:58;;3029:66;3061:6;3069:10;3081:4;3087:7;3029:31;:66::i;:::-;3105;3137:6;3145:10;3157:4;3163:7;3105:31;:66::i;:::-;3202:4;3193:19;;;3213:2;3193:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;3193:23:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;3193:23:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;3193:23:15;2512:711;;;;-1:-1:-1;3193:23:15;;-1:-1:-1;2512:711:15;;-1:-1:-1;;;;;;;;;2512:711:15:o;3228:939::-;3474:16;3492:14;3508;3455:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3561:169:::1;3588:5;3607:4;3625:18;3657:9;3680:14;3708:12;3561:13;:169::i;:::-;3534:196:::0;;-1:-1:-1;3534:196:15;-1:-1:-1;3740:12:15::1;3755:40;3774:7;3783:5:::0;3790:4:::1;3755:18;:40::i;:::-;3740:55;;3805:69;3837:5;3844:10;3856:4;3862:11;3805:31;:69::i;:::-;3890:4;3884:19;;;3911:9;3884:39;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;3884:39:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;3884:39:15;;;;;3946:4;3940:20;;;3961:4;3967:9;3940:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;3940:37:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;3940:37:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;3940:37:15;3933:45:::1;;;;4009:4;4000:19;;;4020:2;4000:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;4000:23:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;4000:23:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;4000:23:15;;-1:-1:-1;4072:9:15::1;:21:::0;-1:-1:-1;4068:92:15::1;;;4095:65;4126:10;4150:9;4138;:21;4095:30;:65::i;:::-;895:1;3228:939:::0;;;;;;;;;;;:::o;12711:770::-;12918:21;12891:8;847:15;835:8;:27;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12974:4:::1;12963:15;;:4;;12968:1;12963:7;;;;;;;;;;;;;;;:15;;;12955:51;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;13026:49;13050:7;13059:9;13070:4;;13026:49;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;13026:23:15::1;::::0;-1:-1:-1;;;13026:49:15:i:1;:::-;13016:59;;13107:9;13093:7;13101:1;13093:10;;;;;;;;;;;;;;:23;;13085:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13170:4;13164:19;;;13191:7;13199:1;13191:10;;;;;;;;;;;;;;13164:40;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;13164:40:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;13164:40:15;;;;;13227:4;13221:20;;;13242:45;13261:7;13270:4;;13275:1;13270:7;;;;;;13242:45;13289:7;13297:1;13289:10;;;;;;;;;;;;;;13221:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24::::0;17:12:::1;2:2;13221:79:15;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;13221:79:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;13221:79:15;13214:87:::1;;;;13311:24;13317:7;13326:4;;13311:24;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;::::1;74:27:::0;;;;-1:-1;13332:2:15;;-1:-1:-1;13311:5:15::1;::::0;-1:-1:-1;;13311:24:15:i:1;:::-;13396:7;13404:1;13396:10;;;;;;;;;;;;;;13384:9;:22;13380:94;;;13408:66;13439:10;13463:7;13471:1;13463:10;;;;;;;;;;;;;;13451:9;:22;13408:30;:66::i;526:357:13:-:0;719:45;;;708:10;719:45;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;719:45:13;;;;;;;25:18:-1;;61:17;;96:58;182:15;719:45:13;179:29:-1;160:49;;708:57:13;;;;673:12;;687:17;;708:10;;;;719:45;708:57;;;25:18:-1;708:57:13;;25:18:-1;36:153;66:2;61:3;58:11;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;708:57:13;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;672:93:13;;;;783:7;:57;;;;-1:-1:-1;795:11:13;;:16;;:44;;;826:4;815:24;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;815:24:13;795:44;775:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;526:357;;;;;:::o;1293:192::-;1400:12;;;1362;1400;;;;;;;;;1379:7;;;;1393:5;;1379:34;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1379:34:13;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;1361:52:13;;;1431:7;1423:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1293:192;;;:::o;2456:498:28:-;2549:14;2594:1;2583:8;:12;2575:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2667:1;2655:9;:13;:31;;;;;2685:1;2672:10;:14;2655:31;2647:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2735:20;2758:17;:8;2771:3;2758:17;:12;:17;:::i;:::-;2735:40;-1:-1:-1;2785:14:28;2802:31;2735:40;2822:10;2802:31;:19;:31;:::i;:::-;2785:48;-1:-1:-1;2843:16:28;2862:40;2886:15;2862:19;:9;2876:4;2862:19;:13;:19;:::i;:::-;:23;:40;:23;:40;:::i;:::-;2843:59;;2936:11;2924:9;:23;;;;;;;2456:498;-1:-1:-1;;;;;;;2456:498:28:o;3605:497::-;3706:21;3762:1;3747:4;:11;:16;;3739:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:4;:11;3812:23;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3812:23:28;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;144:17;;-1:-1;3812:23:28;;3802:33;;3858:8;3845:7;3853:1;3845:10;;;;;;;;;;;;;:21;;;;;3881:6;3876:220;3907:1;3893:4;:11;:15;3889:1;:19;3876:220;;;3930:14;3946:15;3965:42;3977:7;3986:4;3991:1;3986:7;;;;;;;;;;;;;;3995:4;4000:1;4004;4000:5;3995:11;;;;;;;;;;;;;;3965;:42::i;:::-;3929:78;;;;4038:47;4051:7;4059:1;4051:10;;;;;;;;;;;;;;4063:9;4074:10;4038:12;:47::i;:::-;4021:7;4029:1;4033;4029:5;4021:14;;;;;;;;;;;;;;;;;:64;-1:-1:-1;;3910:3:28;;3876:220;;;;3605:497;;;;;:::o;978:466::-;1067:12;1092:14;1108;1126:26;1137:6;1145;1126:10;:26::i;:::-;1286:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22::-1;26:21;;;22:32;6:49;;1286:32:28;;;;;1276:43;;;;;;1192:242;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;1192:242:28;;;;;;;1182:253;;;;;;;;;978:466;-1:-1:-1;;;;;978:466:28:o;889:398:13:-;1112:51;;;1101:10;1112:51;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;1112:51:13;;;;;;;25:18:-1;;61:17;;96:58;182:15;1112:51:13;179:29:-1;160:49;;1101:63:13;;;;1066:12;;1080:17;;1101:10;;;;1112:51;1101:63;;;25:18:-1;1101:63:13;;25:18:-1;36:153;66:2;61:3;58:11;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1101:63:13;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;1065:99:13;;;;1182:7;:57;;;;-1:-1:-1;1194:11:13;;:16;;:44;;;1225:4;1214:24;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1214:24:13;1194:44;1174:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;889:398;;;;;;:::o;8552:700:15:-;8658:6;8653:593;8684:1;8670:4;:11;:15;8666:1;:19;8653:593;;;8707:13;8722:14;8741:4;8746:1;8741:7;;;;;;;;;;;;;;8750:4;8755:1;8759;8755:5;8750:11;;;;;;;;;;;;;;8706:56;;;;8777:14;8796:36;8818:5;8825:6;8796:21;:36::i;:::-;8776:56;;;8846:14;8863:7;8871:1;8875;8871:5;8863:14;;;;;;;;;;;;;;8846:31;;8892:15;8909;8937:6;8928:15;;:5;:15;;;:61;;8970:9;8986:1;8928:61;;;8952:1;8956:9;8928:61;8891:98;;;;9003:10;9034:1;9020:4;:11;:15;9016:1;:19;:76;;9089:3;9016:76;;;9038:48;9057:7;9066:6;9074:4;9079:1;9083;9079:5;9074:11;;;;;;;;;;;;;;9038:18;:48::i;:::-;9003:89;;9115:42;9134:7;9143:5;9150:6;9115:18;:42::i;:::-;9106:57;;;9181:10;9193;9205:2;9219:1;9209:12;;;;;;;;;;;;;;;;;;;;;;;;;21:6:-1;;108:14;9209:12:15;87:42:-1;143:17;;-1:-1;9209:12:15;;9106:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;9106:129:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;9106:129:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;8687:3:15;;;;;-1:-1:-1;8653:593:15;;-1:-1:-1;;;;;;;;8653:593:15;;;8552:700;;;:::o;4180:518:28:-;4281:21;4337:1;4322:4;:11;:16;;4314:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4398:4;:11;4387:23;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4387:23:28;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;144:17;;-1:-1;4387:23:28;;4377:33;;4450:9;4420:7;4445:1;4428:7;:14;:18;4420:27;;;;;;;;;;;;;;;;;:39;4483:11;;:15;;4469:223;4500:5;;4469:223;;4527:14;4543:15;4562:42;4574:7;4583:4;4592:1;4588;:5;4583:11;;;;;;;;;;;;;;4596:4;4601:1;4596:7;;;;;;;4562:42;4526:78;;;;4635:46;4647:7;4655:1;4647:10;;;;;;;;;;;;;;4659:9;4670:10;4635:11;:46::i;:::-;4618:7;4630:1;4626;:5;4618:14;;;;;;;;;;;;;;;;;:63;-1:-1:-1;;4507:3:28;;4469:223;;13624:1161:15;13736:6;13731:1048;13762:1;13748:4;:11;:15;13744:1;:19;13731:1048;;;13785:13;13800:14;13819:4;13824:1;13819:7;;;;;;;;;;;;;;13828:4;13833:1;13837;13833:5;13828:11;;;;;;;;;;;;;;13784:56;;;;13855:14;13874:36;13896:5;13903:6;13874:21;:36::i;:::-;13854:56;;;13924:13;13949:42;13968:7;13977:5;13984:6;13949:18;:42::i;:::-;13924:68;;14006:16;14036:17;14122:13;14137;14155:4;:16;;;:18;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;14155:18:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14155:18:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;14155:18:15;;;;;;;14121:52;;;;;-1:-1:-1;14121:52:15;;-1:-1:-1;14188:17:15;;14229:15;;;;;;;;:61;;14271:8;14281;14229:61;;;14248:8;14258;14229:61;14187:103;;;;14318:56;14361:12;14325:5;14318:23;;;14350:4;14318:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;14318:56:15;14304:70;;14403:65;14427:11;14440:12;14454:13;14403:23;:65::i;:::-;14388:80;;13731:1048;;;;14497:15;14514;14542:6;14533:15;;:5;:15;;;:67;;14578:12;14597:1;14533:67;;;14557:1;14561:12;14533:67;14496:104;;;;14614:10;14645:1;14631:4;:11;:15;14627:1;:19;:76;;14700:3;14627:76;;;14649:48;14668:7;14677:6;14685:4;14690:1;14694;14690:5;14685:11;;;;;;;14649:48;14755:12;;;14765:1;14755:12;;;;;;;;;;14717:51;;;;;;;;;;;;;;;:9;:51;;;;;;;;;;;;;;;;;;;;;;14614:89;;-1:-1:-1;14717:9:15;;;;;;14727:10;;14739;;14614:89;;14755:12;;14717:51;;;;;;;;14755:12;;14717:51;;;;14755:12;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;14717:51:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;14717:51:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;13765:3:15;;;;;-1:-1:-1;13731:1048:15;;-1:-1:-1;;;;;;;;;;13731:1048:15;286:127:30;369:5;;;364:16;;;;356:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3072:454:28;3165:13;3210:1;3198:9;:13;3190:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3284:1;3272:9;:13;:31;;;;;3302:1;3289:10;:14;3272:31;3264:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3352:14;3369:34;3398:4;3369:24;:9;3383;3369:24;:13;:24;:::i;:::-;:28;:34;:28;:34;:::i;:::-;3352:51;-1:-1:-1;3413:16:28;3432:34;3462:3;3432:25;:10;3447:9;3432:25;:14;:25;:::i;:34::-;3413:53;;3487:32;3517:1;3500:11;3488:9;:23;;;;;;;3487:32;:29;:32;:::i;:::-;3476:43;3072:454;-1:-1:-1;;;;;;3072:454:28:o;2032:305::-;2114:12;2156:1;2146:7;:11;2138:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2222:1;2211:8;:12;:28;;;;;2238:1;2227:8;:12;2211:28;2203:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2322:8;2298:21;:7;2310:8;2298:21;:11;:21;:::i;:::-;:32;;;;;;;2032:305;-1:-1:-1;;;;2032:305:28:o;556:333::-;631:14;647;691:6;681:16;;:6;:16;;;;673:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;771:6;762:15;;:6;:15;;;:53;;800:6;808;762:53;;;781:6;789;762:53;743:72;;-1:-1:-1;743:72:28;-1:-1:-1;833:20:28;;;825:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;556:333;;;;;:::o;1186:1321:15:-;1490:44;;;;;;:58;:44;;;;;;;;;;;;;;;;1397:12;;;;;;1502:7;1490:28;;;;;;:44;;;;;;;;;;;;;;;:28;:44;;;2:2:-1;;;;27:1;24;17:12;2:2;1490:44:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1490:44:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1490:44:15;:58;;;1486:136;;;1564:47;;;;;;:31;:47;;;;;;;;;;;;;;;;1576:7;1564:31;;;;;;:47;;;;;;;;;;;;;;;-1:-1:-1;1564:31:15;:47;;;2:2:-1;;;;27:1;24;17:12;2:2;1564:47:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1564:47:15;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;1486:136:15;1632:13;1647;1664:47;1687:7;1696:6;1704;1664:22;:47::i;:::-;1631:80;;;;1725:8;1737:1;1725:13;:30;;;;-1:-1:-1;1742:13:15;;1725:30;1721:780;;;1793:14;;-1:-1:-1;1809:14:15;;-1:-1:-1;1721:780:15;;;1855:19;1877:52;1894:14;1910:8;1920;1877:16;:52::i;:::-;1855:74;;1965:14;1947;:32;1943:548;;2025:10;2007:14;:28;;1999:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2112:14;;-1:-1:-1;2128:14:15;-1:-1:-1;2128:14:15;1943:548;;;2182:19;2204:52;2221:14;2237:8;2247;2204:16;:52::i;:::-;2182:74;;2299:14;2281;:32;;2274:40;;;;2358:10;2340:14;:28;;2332:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2445:14;-1:-1:-1;2461:14:15;;-1:-1:-1;1943:548:15;1721:780;;1186:1321;;;;;;;;;;;:::o;419:140:30:-;471:6;497;;;:30;;-1:-1:-1;;512:5:30;;;526:1;521;512:5;521:1;507:15;;;;;:20;497:30;489:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;154:126;237:5;;;232:16;;;;224:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1499:423:28;1592:13;1607;1633:14;1652:26;1663:6;1671;1652:10;:26::i;:::-;1632:46;;;1688:32;1696:7;1705:6;1713;1688:7;:32::i;:::-;;1731:13;1746;1773:32;1781:7;1790:6;1798;1773:7;:32::i;:::-;1764:54;;;:56;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1764:56:28;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1764:56:28;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1764:56:28;;;;;;;1730:90;;;;;-1:-1:-1;1730:90:28;;-1:-1:-1;1853:16:28;;;;;;;;:62;;1896:8;1906;1853:62;;;1873:8;1883;1853:62;1830:85;;;;-1:-1:-1;1499:423:28;-1:-1:-1;;;;;;;1499:423:28:o",
  "source": "pragma solidity =0.6.6;\n\n/*\n * ApeSwapFinance \n * App:             https://apeswap.finance\n * Medium:          https://ape-swap.medium.com    \n * Twitter:         https://twitter.com/ape_swap \n * Telegram:        https://t.me/ape_swap\n * Announcements:   https://t.me/ape_swap_news\n * GitHub:          https://github.com/ApeSwapFinance\n */\n\nimport './interfaces/IApeFactory.sol';\nimport '@uniswap/lib/contracts/libraries/TransferHelper.sol';\n\nimport './interfaces/IApeRouter02.sol';\nimport './libraries/ApeLibrary.sol';\nimport './libraries/SafeMath.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IWETH.sol';\n\ncontract ApeRouter is IApeRouter02 {\n    using SafeMath for uint;\n\n    address public immutable override factory;\n    address public immutable override WETH;\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, 'ApeRouter: EXPIRED');\n        _;\n    }\n\n    constructor(address _factory, address _WETH) public {\n        factory = _factory;\n        WETH = _WETH;\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin\n    ) internal virtual returns (uint amountA, uint amountB) {\n        // create the pair if it doesn't exist yet\n        if (IApeFactory(factory).getPair(tokenA, tokenB) == address(0)) {\n            IApeFactory(factory).createPair(tokenA, tokenB);\n        }\n        (uint reserveA, uint reserveB) = ApeLibrary.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint amountBOptimal = ApeLibrary.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, 'ApeRouter: INSUFFICIENT_B_AMOUNT');\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint amountAOptimal = ApeLibrary.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, 'ApeRouter: INSUFFICIENT_A_AMOUNT');\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        address pair = ApeLibrary.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = IApePair(pair).mint(to);\n    }\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = ApeLibrary.pairFor(factory, token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n        liquidity = IApePair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n        address pair = ApeLibrary.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(pair, msg.sender, pair, liquidity); // send liquidity to pair\n        (uint amount0, uint amount1) = IApePair(pair).burn(to);\n        (address token0,) = ApeLibrary.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, 'ApeRouter: INSUFFICIENT_A_AMOUNT');\n        require(amountB >= amountBMin, 'ApeRouter: INSUFFICIENT_B_AMOUNT');\n    }\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\n        (amountToken, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, amountToken);\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountA, uint amountB) {\n        address pair = ApeLibrary.pairFor(factory, tokenA, tokenB);\n        uint value = approveMax ? uint(-1) : liquidity;\n        IApePair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n    }\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountToken, uint amountETH) {\n        address pair = ApeLibrary.pairFor(factory, token, WETH);\n        uint value = approveMax ? uint(-1) : liquidity;\n        IApePair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n    }\n\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\n        (, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountETH) {\n        address pair = ApeLibrary.pairFor(factory, token, WETH);\n        uint value = approveMax ? uint(-1) : liquidity;\n        IApePair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n            token, liquidity, amountTokenMin, amountETHMin, to, deadline\n        );\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = ApeLibrary.sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n            address to = i < path.length - 2 ? ApeLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            IApePair(ApeLibrary.pairFor(factory, input, output)).swap(\n                amount0Out, amount1Out, to, new bytes(0)\n            );\n        }\n    }\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = ApeLibrary.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'ApeRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, ApeLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = ApeLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'ApeRouter: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, ApeLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, 'ApeRouter: INVALID_PATH');\n        amounts = ApeLibrary.getAmountsOut(factory, msg.value, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'ApeRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(ApeLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n    }\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, 'ApeRouter: INVALID_PATH');\n        amounts = ApeLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, 'ApeRouter: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, ApeLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, 'ApeRouter: INVALID_PATH');\n        amounts = ApeLibrary.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'ApeRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, ApeLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, 'ApeRouter: INVALID_PATH');\n        amounts = ApeLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= msg.value, 'ApeRouter: EXCESSIVE_INPUT_AMOUNT');\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(ApeLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n        // refund dust eth, if any\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n    }\n\n    // **** SWAP (supporting fee-on-transfer tokens) ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = ApeLibrary.sortTokens(input, output);\n            IApePair pair = IApePair(ApeLibrary.pairFor(factory, input, output));\n            uint amountInput;\n            uint amountOutput;\n            { // scope to avoid stack too deep errors\n            (uint reserve0, uint reserve1,) = pair.getReserves();\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n            amountOutput = ApeLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\n            address to = i < path.length - 2 ? ApeLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) {\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, ApeLibrary.pairFor(factory, path[0], path[1]), amountIn\n        );\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'ApeRouter: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n    {\n        require(path[0] == WETH, 'ApeRouter: INVALID_PATH');\n        uint amountIn = msg.value;\n        IWETH(WETH).deposit{value: amountIn}();\n        assert(IWETH(WETH).transfer(ApeLibrary.pairFor(factory, path[0], path[1]), amountIn));\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            'ApeRouter: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n    {\n        require(path[path.length - 1] == WETH, 'ApeRouter: INVALID_PATH');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, ApeLibrary.pairFor(factory, path[0], path[1]), amountIn\n        );\n        _swapSupportingFeeOnTransferTokens(path, address(this));\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\n        require(amountOut >= amountOutMin, 'ApeRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWETH(WETH).withdraw(amountOut);\n        TransferHelper.safeTransferETH(to, amountOut);\n    }\n\n    // **** LIBRARY FUNCTIONS ****\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\n        return ApeLibrary.quote(amountA, reserveA, reserveB);\n    }\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        override\n        returns (uint amountOut)\n    {\n        return ApeLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        override\n        returns (uint amountIn)\n    {\n        return ApeLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint amountIn, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint[] memory amounts)\n    {\n        return ApeLibrary.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint amountOut, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint[] memory amounts)\n    {\n        return ApeLibrary.getAmountsIn(factory, amountOut, path);\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.6.6+commit.6c089d02.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.6",
  "updatedAt": "2022-05-17T16:39:48.447Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}